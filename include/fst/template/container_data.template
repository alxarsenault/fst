// -*- C++ -*-

//
// MIT License
//
// Copyright (c) 2023 Alexandre Arsenault
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

// Needs:
// - #include "fst/common.h"
// - size_type
// - pointer
// - const_pointer
// - reference
// - const_reference
// - iterator
// - const_iterator
// - pointer data();
// - const_pointer data() const;

// FST_NODISCARD FST_ALWAYS_INLINE constexpr pointer data() noexcept { return (pointer) _data; }
// FST_NODISCARD FST_ALWAYS_INLINE constexpr const_pointer data() const noexcept { return (const_pointer) _data; }

FST_NODISCARD FST_ALWAYS_INLINE constexpr pointer data(size_type offset) noexcept
{
    fst_assert(data(), "access nullptr");
    fst_assert(offset < this->size(), "offset out of bounds");
    return data() + offset;
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr const_pointer data(size_type offset) const noexcept
{
    fst_assert(data(), "access nullptr");
    fst_assert(offset < this->size(), "offset out of bounds");
    return data() + offset;
}

template <size_t I>
FST_NODISCARD FST_ALWAYS_INLINE constexpr pointer data() noexcept
{
    fst_assert(data(), "access nullptr");
    fst_assert(I < this->size(), "offset out of bounds");
    return data() + I;
}

template <size_t I>
FST_NODISCARD FST_ALWAYS_INLINE constexpr const_pointer data() const noexcept
{
    fst_assert(data(), "access nullptr");
    fst_assert(I < this->size(), "offset out of bounds");
    return data() + I;
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr iterator begin() noexcept
{
    return iterator(data());
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr const_iterator begin() const noexcept
{
    return const_iterator(data());
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr iterator end() noexcept
{
    return iterator(data() + this->size());
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr const_iterator end() const noexcept
{
    return const_iterator(data() + this->size());
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr const_iterator cbegin() const noexcept
{
    return begin();
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr const_iterator cend() const noexcept
{
    return end();
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr reference front() noexcept
{
    return data()[0];
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr const_reference front() const noexcept
{
    return data()[0];
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr reference back() noexcept
{
    return data()[this->size() - 1];
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr const_reference back() const noexcept
{
    return data()[this->size() - 1];
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr reference operator[](size_type index) noexcept
{
    return data()[index];
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr const_reference operator[](size_type index) const noexcept
{
    return data()[index];
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr reference reversed(size_type index) noexcept
{
    fst_assert(index < this->size(), "index out of bounds");
    return data()[this->size() - index - 1];
}

FST_NODISCARD FST_ALWAYS_INLINE constexpr const_reference reversed(size_type index) const noexcept
{
    fst_assert(index < this->size(), "index out of bounds");
    return data()[this->size() - index - 1];
}
